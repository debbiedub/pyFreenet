#+title: Freenet Communication Primitives: Part 3, Doing it Right

#+BEGIN_ABSTRACT
Basic building blocks for communication in Freenet.

This is a guide to using [[https://freenetproject.org][Freenet]] as backend for communication solution - suitable for anything from filesharing over chat up to decentrally hosted game content like level-data. It uses the [[https://github.com/freenet/lib-pyfreenet/][Python interface to Freenet]] for its examples.

This guide consists of several installments: [[http://draketo.de/light/english/freenet/communication-primitives-1-files-and-sites][Part 1]] is about exchanging data, [[http://draketo.de/light/english/freenet/communication-primitives-2-discovery][Part 2]] is about finding people and services without drowning in spam, the basic pattern of communication, and Part 3 is about confidential communication and tieing it all together. 

Note: You need the current release of pyFreenet for the examples in this article (0.3.5, should be released in time of publication). Get it from [[https://pypi.python.org/pypi][PyPI]]:

#+BEGIN_SRC sh
# with setuptools
easy_install --user pyFreenet
# or pip
pip install --user pyFreenet
#+END_SRC

This is part 3: Doing it Right. It shows you how to harness the existing tools in Freenet to build communication solutions.

Many of the concepts shown here were developed by Steve Dougherty during his Google Summer of Code project 2013 for integrating Infocalypse with the Web of Trust to turn it into a decentralized code hosting platform with usage patterns similar to GitHub (see [[http://draketo.de/english/freenet/real-life-infocalypse][Real Life Infocalypse]]).

Welcome to Freenet, where no one can watch you read!
#+END_ABSTRACT

* Practical implementation

To ensure that the methods discussed in this article are directly applicable, the article is accompanied by the tool babcom-freenet, which utilizes exactly these methods to provide a working communication solution. It is kept simple to be suitable for a tutorial, but provides everything you need to build your own tool — or integrate Freenet into your application.

- Tool to start with the identity to use: babcom-freenet [-u ID]
- ~/.config/babcom-freenet/<ID>
- ~/.local/share/babcom-freenet/<ID>
- if no ID given, create a new one

* Skelleton of an interactive shell

Since this will a communication program, I start with a basic setup
for an interactive shell. For your own project just replace this
skelleton with any other setup. It provides the constraints of general
interactive programs to ensure that the code examples from this
tutorial can be adapted easily for other projects.

#+BEGIN_SRC python
#!/usr/bin/env python2
# encoding: utf-8

"""Implementation of Freenet Commmunication Primitives"""


import sys
import argparse # commandline arguments
import cmd # interactive shell


# first, parse commandline arguments
def parse_args():
    """Parse commandline arguments."""
    parser = argparse.ArgumentParser(description="Implementation of Freenet Communication Primitives")
    parser.add_argument('-u', '--user', default=None, help="Identity to use (default: create new)")
    parser.add_argument('--test', default=False, action="store_true", help="Run the tests")
    args = parser.parse_args()
    return args


# then add interactive usage, since this will be a communication tool
class Babcom(cmd.Cmd):
    prompt = "> "
    def do_hello(self, *args):
        """Says Hello. Usage: hello [<name>]"""
        name = args[0] if args else 'World'
        print "Hello {}".format(name)

    def do_quit(self, *args):
        "Leaves the program"
        raise SystemExit

    def do_EOF(self, *args):
        "Leaves the program. Commonly called via CTRL-D"
        raise SystemExit


def _test():
    """Run the tests

    >>> True
    True
    """
    try:
        import newbase60
        numtostring = newbase60.numtosxg
    except:
        numtostring = str
        
    import doctest
    tests = doctest.testmod()
    if tests.failed:
        return "☹"*tests.failed + " / " + numtostring(tests.attempted)
    return "^_^ (" + numtostring(tests.attempted) + ")"


if __name__ == "__main__":
    args = parse_args()
    if args.test:
        print _test()
        sys.exit(0)
    prompt = Babcom()
    prompt.cmdloop('Starting babcom, type help for help')
#+END_SRC

When starting this, it shows a basic commandline UI. Here’s an example session:

#+BEGIN_EXAMPLE
$ ./babcom.py 
Starting babcom, type help for help
> help

Documented commands (type help <topic>):
========================================
EOF  hello  help  quit

> help hello
Says Hello. Usage: hello [<name>]
> hello Freenet
Hello Freenet
> quit
#+END_EXAMPLE

Also you can run the doctests with =./babcom.py --test=:

#+BEGIN_EXAMPLE
$ ./babcom.py --test
^_^ (M)
#+END_EXAMPLE

And now that the basics are in place, let us start with actual Freenet stuff.

* Identity

The first thing we need to communicate is an identity. The identity provides the private and public keys used for communication and holds information which allows others to contact us.

We get an Identity from the Web of Trust plugin using a PluginMessage. PluginMessages are FCP messages which the node forwards to a given plugin. The plugin replies with an FCPPluginReply including a Replies.Message.

There are two cases: In the first run we do not have an identity yet, so we have to create one. In subsequent runs we can simply reuse the identity.

#+BEGIN_SRC python
  def createidentity(name="BabcomTest"):
      """Create a new Web of Trust identity.

      >>> createidentity("BabcomTest")
      'BabcomTest'
      """
      # prepare the message to the plugin
      plugin_params = {"Message": "CreateIdentity",
                       "Nickname": name,
                       "Context": "",
                       "PublishTrustList": "true"}  # must use string "true"
      # and send it to plugins.WebOfTrust
      with fcp.FCPNode() as n:
          resp = n.fcpPluginMessage(
              plugin_name="plugins.WebOfTrust.WebOfTrust",
              plugin_params=plugin_params)[0] # only one reply
      # finally check whether the received reply indicates success.
      if resp['header'] != 'FCPPluginReply' or resp.get('Replies.Message', "") != 'IdentityCreated':
          raise ProtocolError()
      return name
#+END_SRC

To make this easier for users, we can create the identity only if
there is not yet an identity with the same prefix.

We have to request all our own IDs and then filter for the identity.

First we request all IDs for which we have the private keys (the
OwnIdentities). Then we parse the name, so we can append part of the
key of the identity to select a specific ID if several share the same
name. Finally we select only those IDs which match the name and
keypart.

Let’s implement that.

#+BEGIN_SRC python
  def _parse_name(wot_identifier):
      """
      >>> _parse_name("BabcomTest@123")
      ('BabcomTest', '123')
      """
      split = wot_identifier.split('@', 1)
      nickname_prefix = split[0]
      key_prefix = (split[1] if split[1:] else '')
      return nickname_prefix, key_prefix


  def _matchingidentities(prefix, response):
      """Find matching identities in a Web of Trust Plugin response.

      >>> _matchingidentities("BabcomTest", {})
      []
      """
      field = "Replies.Nickname"
      matches = []
      nickname_prefix, key_prefix = _parse_name(prefix)
      for i in response:
          if i.startswith(field) and response[i].startswith(prefix):
              # format: Replies.Nickname<id_num>
              id_num = i[len(field):]
              nickname = response[i]
              pubkey_hash = response['Replies.Identity{}'.format(id_num)]
              if pubkey_hash.startswith(key_prefix):
                  matches.append((nickname, pubkey_hash))

      return matches


  def getownidentities(user):
      """Get all own identities which match user."""
      with fcp.FCPNode() as n:
          resp = n.fcpPluginMessage(
              plugin_name="plugins.WebOfTrust.WebOfTrust",
              plugin_params={"Message": "GetOwnIdentities"})[0]
      if resp['header'] != 'FCPPluginReply' or resp.get('Replies.Message', '') != 'OwnIdentities':
          return None
      return _matchingidentities(user, resp)


  def myidentity(user=None):
      """Get an identity from the Web of Trust plugin.

      :param user: Name of the Identity, optionally with additional
                   prefix of the key to disambiguate it.

      >>> matches = myidentity("BabcomTest")
      >>> name, identity = matches[0]
      >>> name
      'BabcomTest'
      """
      if user is None:
          user = createidentity()
      matches = getownidentities(user)
      if not matches:
          createidentity(user)
          matches = getownidentities(user)
      
      return matches

#+END_SRC

That’s it. We have an identity. This identity can be found by other
users and provides entry points for other services. We can give it a
context, for example the name of a chatroom, and other users can look
for all identities with that context.

For all this, we need the identity hash. An identity hash looks like
this: "fVzf7fg0Va7vNTZZQNKMCDGo6-FSxzF3PhthcXKRRvA". This is the key
we will need for most other Web of Trust functionality.

Later we will use some further functions of the Web of Trust. But now
we first have to recover one trick from the [[http://www.draketo.de/light/english/freenet/communication-primitives-1-files-and-sites][first part]] of this series:
The latency hacks to get to round-trip-times of less than one minute.

Note: If you want to debug the code in these examples, set the node
verbosity to 5 or more to see the actual FCP messages exchanged with
the node.

#+BEGIN_SRC python
n.verbosity = 5
#+END_SRC

* Latency Hacks

Freenet provides an array of protections for privacy, from filtering
out potentially unsafe HTML tags over forcing the mime type of images
and stripping comment parts to warning users about potentially unsafe
files. All of these safety checks require additional information, and
retrieving that information costs latency. If we want a somewhat fast
system, we need to use every trick in the book to speed up content
retrieval.

This speed hack is taken from part 1 of this series. But different
from part 1, we now use 2 different nodes to test the latency.

#+BEGIN_SRC python :results output
  import fcp
  import time
  with fcp.FCPNode() as n:
      with fcp.FCPNode(port="9482") as m:
          # we generate a key with the additional filename hello.
          public, private = m.genkey(name="hello.txt")
          job = n.get(public, realtime=True, priority=1, **{"async": True})
          start = time.time()
          m.put(uri=private, data="Hello Friend!",
                mimetype="application/octet-stream", # default mime type = no metadata
                realtime=True, # the realtime queue is optimized for latency
                               # instead of throughput
                priority=1) # second highest priority will block all other jobs
          mime, data, meta = job.wait()
          latency = time.time() - start

  print public
  print data
  print "latency (seconds):", latency
#+END_SRC

: SSK@-B6MJGAzqaVa-I3e4ROwXVXvIcaZrCc2rec09Z0~Pzg,bRa~0XC7-bSmxk38sD6TIVewltjcGHciE~q1cC0rDnk,AQACAAE/hello.txt
: Hello Friend!
: latency (seconds): 46.1542391777

46 seconds from upload to delivery isn’t really fast, but completely sufficient for comments and even for interactive chat. Most people take far longer than that to write their comment in the first place.

To use these speed hacks, we’ll use prepared fast upload and download functions:

#+BEGIN_SRC python
  def fastput(node, private, data, **kw):
      return node.put(uri=private, data="Hello Friend!",
                      mimetype="application/octet-stream",
                      realtime=True, priority=1,
                      **kw)

  def fastget(node, public, **kw):
      return node.get(public,
                      realtime=True, priority=1,
                      **kw)

#+END_SRC

Now the tools are in place. We can start to implement actual interaction.

* Watch me: Becoming visible to one person (introduction CAPTCHAs)

- [X] Add extra textonly CAPTCHA queue which allows to ask a selected
      identity to watch the requesting identity.
- [X] Add function to add trust to an identity.
- [X] Add function to solve a CAPTCHA.
- [X] Add function to watch for CAPTCHA solutions.
- [X] At start of the interactive shell, get my identity.
- [X] Add interactive shell option: announce / introduce / watchme
- [X] Add function visibleto to check whether the other one already
      added trust (if the id publishes a trust list).
- [X] Get captchas directly, if WoT does not have an identity
      yet. Needed until WoT gets fast enough in fetching a newly trusted
      identity.
- [X] Add persistent state, for example to remember previously
      inserted CAPTCHA solutions.
- [X] Add transient mode which does not store anything.

* Announce it: Anonymous one-to-many communication

- create a context
- add a property with a USK to check
- create a listing for that USK
- find all identities with the given context. Subscribe to the USKs, show updates when they change
- Add a limited number of freebe-CAPTCHAs: Identities randomly choose
  to publish clear KSKs so a limited number of IDs can announce
  without interaction from the seed-IDs. First come, first
  served. Spammable, but better than dieing if the seed IDs get
  stale. People who trust the announcing IDs can then give the first
  to insert their keys into the freebee-CAPTCHAs trust 0. And
  afterwards, WoT takes over (being seen by some active IDs is
  enough). That’s the rate-limited spam-queue :) — but use it to spam,
  and you disappear thanks to the WoT. And the possible recipients can
  choose how many IDs with potential spam to watch instead of having
  to filter uninvited messages.

* Meet me: Chat with Topics

- Two schemes: FMS date based and Freetalk USK based.
- Chat: Only latest note relevant, choose USK.

* Contact me: Confidential One-to-One Communication

- [ ] List identities we could contact (context babcom)
- [ ] Load and setup Freemail.
- [ ] Send a Freemail.
- [ ] interactive shell option: contact (watchme + send Freemail)
- [ ] interactive shell option: messages (list -> read or cancel)
- [ ] required for visibility (until WoT provides a query for that):
  You trust me or one of my non-zero trusters is one of your non-zero
  trustees.

* Discuss: Connect to FMS
* More stuff

- [ ] Add a statusline which is updated live, not only on clicking enter.
- [ ] Check for Freenet. “if you do not have Freenet yet, please install it by clicking [[https://freenetproject.org/download.html#autostart]]. If you already have a running Freenet, select your node via arg0 --host HOST --port PORT (example: babcom.py --host 127.0.0.1 --port 9481)”
- [ ] --setup-freenet-if-missing: If Java is available but there’s no freenet node at --host H --port P, just setup a node in ~/.local/var/babcom/ using an approach like scripts/test-autoupgrade
